# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Param(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, slhc: float=None, hst: float=None, hct: float=None, mcv: float=None, mch: float=None, mchc: float=None, rdwcv: float=None, sltc: float=None, slbc: float=None, ferritin: float=None, fe: float=None, hba1: float=None, hba2: float=None, mode: str=None):  # noqa: E501
        """Param - a model defined in Swagger

        :param slhc: The slhc of this Param.  # noqa: E501
        :type slhc: float
        :param hst: The hst of this Param.  # noqa: E501
        :type hst: float
        :param hct: The hct of this Param.  # noqa: E501
        :type hct: float
        :param mcv: The mcv of this Param.  # noqa: E501
        :type mcv: float
        :param mch: The mch of this Param.  # noqa: E501
        :type mch: float
        :param mchc: The mchc of this Param.  # noqa: E501
        :type mchc: float
        :param rdwcv: The rdwcv of this Param.  # noqa: E501
        :type rdwcv: float
        :param sltc: The sltc of this Param.  # noqa: E501
        :type sltc: float
        :param slbc: The slbc of this Param.  # noqa: E501
        :type slbc: float
        :param ferritin: The ferritin of this Param.  # noqa: E501
        :type ferritin: float
        :param fe: The fe of this Param.  # noqa: E501
        :type fe: float
        :param hba1: The hba1 of this Param.  # noqa: E501
        :type hba1: float
        :param hba2: The hba2 of this Param.  # noqa: E501
        :type hba2: float
        :param mode: The mode of this Param.  # noqa: E501
        :type mode: str
        """
        self.swagger_types = {
            'slhc': float,
            'hst': float,
            'hct': float,
            'mcv': float,
            'mch': float,
            'mchc': float,
            'rdwcv': float,
            'sltc': float,
            'slbc': float,
            'ferritin': float,
            'fe': float,
            'hba1': float,
            'hba2': float,
            'mode': str
        }

        self.attribute_map = {
            'slhc': 'SLHC',
            'hst': 'HST',
            'hct': 'HCT',
            'mcv': 'MCV',
            'mch': 'MCH',
            'mchc': 'MCHC',
            'rdwcv': 'RDWCV',
            'sltc': 'SLTC',
            'slbc': 'SLBC',
            'ferritin': 'FERRITIN',
            'fe': 'FE',
            'hba1': 'HBA1',
            'hba2': 'HBA2',
            'mode': 'MODE'
        }
        self._slhc = slhc
        self._hst = hst
        self._hct = hct
        self._mcv = mcv
        self._mch = mch
        self._mchc = mchc
        self._rdwcv = rdwcv
        self._sltc = sltc
        self._slbc = slbc
        self._ferritin = ferritin
        self._fe = fe
        self._hba1 = hba1
        self._hba2 = hba2
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt) -> 'Param':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The param of this Param.  # noqa: E501
        :rtype: Param
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slhc(self) -> float:
        """Gets the slhc of this Param.


        :return: The slhc of this Param.
        :rtype: float
        """
        return self._slhc

    @slhc.setter
    def slhc(self, slhc: float):
        """Sets the slhc of this Param.


        :param slhc: The slhc of this Param.
        :type slhc: float
        """

        self._slhc = slhc

    @property
    def hst(self) -> float:
        """Gets the hst of this Param.


        :return: The hst of this Param.
        :rtype: float
        """
        return self._hst

    @hst.setter
    def hst(self, hst: float):
        """Sets the hst of this Param.


        :param hst: The hst of this Param.
        :type hst: float
        """

        self._hst = hst

    @property
    def hct(self) -> float:
        """Gets the hct of this Param.


        :return: The hct of this Param.
        :rtype: float
        """
        return self._hct

    @hct.setter
    def hct(self, hct: float):
        """Sets the hct of this Param.


        :param hct: The hct of this Param.
        :type hct: float
        """

        self._hct = hct

    @property
    def mcv(self) -> float:
        """Gets the mcv of this Param.


        :return: The mcv of this Param.
        :rtype: float
        """
        return self._mcv

    @mcv.setter
    def mcv(self, mcv: float):
        """Sets the mcv of this Param.


        :param mcv: The mcv of this Param.
        :type mcv: float
        """

        self._mcv = mcv

    @property
    def mch(self) -> float:
        """Gets the mch of this Param.


        :return: The mch of this Param.
        :rtype: float
        """
        return self._mch

    @mch.setter
    def mch(self, mch: float):
        """Sets the mch of this Param.


        :param mch: The mch of this Param.
        :type mch: float
        """

        self._mch = mch

    @property
    def mchc(self) -> float:
        """Gets the mchc of this Param.


        :return: The mchc of this Param.
        :rtype: float
        """
        return self._mchc

    @mchc.setter
    def mchc(self, mchc: float):
        """Sets the mchc of this Param.


        :param mchc: The mchc of this Param.
        :type mchc: float
        """

        self._mchc = mchc

    @property
    def rdwcv(self) -> float:
        """Gets the rdwcv of this Param.


        :return: The rdwcv of this Param.
        :rtype: float
        """
        return self._rdwcv

    @rdwcv.setter
    def rdwcv(self, rdwcv: float):
        """Sets the rdwcv of this Param.


        :param rdwcv: The rdwcv of this Param.
        :type rdwcv: float
        """

        self._rdwcv = rdwcv

    @property
    def sltc(self) -> float:
        """Gets the sltc of this Param.


        :return: The sltc of this Param.
        :rtype: float
        """
        return self._sltc

    @sltc.setter
    def sltc(self, sltc: float):
        """Sets the sltc of this Param.


        :param sltc: The sltc of this Param.
        :type sltc: float
        """

        self._sltc = sltc

    @property
    def slbc(self) -> float:
        """Gets the slbc of this Param.


        :return: The slbc of this Param.
        :rtype: float
        """
        return self._slbc

    @slbc.setter
    def slbc(self, slbc: float):
        """Sets the slbc of this Param.


        :param slbc: The slbc of this Param.
        :type slbc: float
        """

        self._slbc = slbc

    @property
    def ferritin(self) -> float:
        """Gets the ferritin of this Param.


        :return: The ferritin of this Param.
        :rtype: float
        """
        return self._ferritin

    @ferritin.setter
    def ferritin(self, ferritin: float):
        """Sets the ferritin of this Param.


        :param ferritin: The ferritin of this Param.
        :type ferritin: float
        """

        self._ferritin = ferritin

    @property
    def fe(self) -> float:
        """Gets the fe of this Param.


        :return: The fe of this Param.
        :rtype: float
        """
        return self._fe

    @fe.setter
    def fe(self, fe: float):
        """Sets the fe of this Param.


        :param fe: The fe of this Param.
        :type fe: float
        """

        self._fe = fe

    @property
    def hba1(self) -> float:
        """Gets the hba1 of this Param.


        :return: The hba1 of this Param.
        :rtype: float
        """
        return self._hba1

    @hba1.setter
    def hba1(self, hba1: float):
        """Sets the hba1 of this Param.


        :param hba1: The hba1 of this Param.
        :type hba1: float
        """

        self._hba1 = hba1

    @property
    def hba2(self) -> float:
        """Gets the hba2 of this Param.


        :return: The hba2 of this Param.
        :rtype: float
        """
        return self._hba2

    @hba2.setter
    def hba2(self, hba2: float):
        """Sets the hba2 of this Param.


        :param hba2: The hba2 of this Param.
        :type hba2: float
        """

        self._hba2 = hba2

    @property
    def mode(self) -> str:
        """Gets the mode of this Param.


        :return: The mode of this Param.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this Param.


        :param mode: The mode of this Param.
        :type mode: str
        """
        allowed_values = ["9PARAMS", "11PARAMS", "13PARAMS"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
