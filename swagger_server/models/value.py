# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.key_value import KeyValue  # noqa: F401,E501
from swagger_server.models.point import Point  # noqa: F401,E501
from swagger_server import util


class Value(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, parameters: List[KeyValue]=None, corners: List[Point]=None, error_code: str=None):  # noqa: E501
        """Value - a model defined in Swagger

        :param parameters: The parameters of this Value.  # noqa: E501
        :type parameters: List[KeyValue]
        :param corners: The corners of this Value.  # noqa: E501
        :type corners: List[Point]
        :param error_code: The error_code of this Value.  # noqa: E501
        :type error_code: str
        """
        self.swagger_types = {
            'parameters': List[KeyValue],
            'corners': List[Point],
            'error_code': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'corners': 'corners',
            'error_code': 'error_code'
        }
        self._parameters = parameters
        self._corners = corners
        self._error_code = error_code

    @classmethod
    def from_dict(cls, dikt) -> 'Value':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The value of this Value.  # noqa: E501
        :rtype: Value
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self) -> List[KeyValue]:
        """Gets the parameters of this Value.


        :return: The parameters of this Value.
        :rtype: List[KeyValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[KeyValue]):
        """Sets the parameters of this Value.


        :param parameters: The parameters of this Value.
        :type parameters: List[KeyValue]
        """

        self._parameters = parameters

    @property
    def corners(self) -> List[Point]:
        """Gets the corners of this Value.


        :return: The corners of this Value.
        :rtype: List[Point]
        """
        return self._corners

    @corners.setter
    def corners(self, corners: List[Point]):
        """Sets the corners of this Value.


        :param corners: The corners of this Value.
        :type corners: List[Point]
        """

        self._corners = corners

    @property
    def error_code(self) -> str:
        """Gets the error_code of this Value.


        :return: The error_code of this Value.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code: str):
        """Sets the error_code of this Value.


        :param error_code: The error_code of this Value.
        :type error_code: str
        """
        allowed_values = ["BADIMAGE", "NEEDCROP"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code
